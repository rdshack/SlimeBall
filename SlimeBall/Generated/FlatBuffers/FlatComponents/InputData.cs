// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatComponents
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct InputData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static InputData GetRootAsInputData(ByteBuffer _bb) { return GetRootAsInputData(_bb, new InputData()); }
  public static InputData GetRootAsInputData(ByteBuffer _bb, InputData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InputData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FrameNum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatComponents.ComponentSet? ComponentState(int j) { int o = __p.__offset(6); return o != 0 ? (FlatComponents.ComponentSet?)(new FlatComponents.ComponentSet()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ComponentStateLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatComponents.InputData> CreateInputData(FlatBufferBuilder builder,
      int frameNum = 0,
      VectorOffset componentStateOffset = default(VectorOffset)) {
    builder.StartTable(2);
    InputData.AddComponentState(builder, componentStateOffset);
    InputData.AddFrameNum(builder, frameNum);
    return InputData.EndInputData(builder);
  }

  public static void StartInputData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrameNum(FlatBufferBuilder builder, int frameNum) { builder.AddInt(0, frameNum, 0); }
  public static void AddComponentState(FlatBufferBuilder builder, VectorOffset componentStateOffset) { builder.AddOffset(1, componentStateOffset.Value, 0); }
  public static VectorOffset CreateComponentStateVector(FlatBufferBuilder builder, Offset<FlatComponents.ComponentSet>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateComponentStateVectorBlock(FlatBufferBuilder builder, Offset<FlatComponents.ComponentSet>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartComponentStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatComponents.InputData> EndInputData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatComponents.InputData>(o);
  }
};


}
