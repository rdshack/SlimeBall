// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatComponents
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GameComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static GameComponent GetRootAsGameComponent(ByteBuffer _bb) { return GetRootAsGameComponent(_bb, new GameComponent()); }
  public static GameComponent GetRootAsGameComponent(ByteBuffer _bb, GameComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte GamePhase { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public int LeftPlayerScore { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RightPlayerScore { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ulong LeftPlayerPawn { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong RightPlayerPawn { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong Ball { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MostRecentPointWasLeft { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FlatComponents.GameComponent> CreateGameComponent(FlatBufferBuilder builder,
      sbyte gamePhase = 0,
      int leftPlayerScore = 0,
      int rightPlayerScore = 0,
      ulong leftPlayerPawn = 0,
      ulong rightPlayerPawn = 0,
      ulong ball = 0,
      bool mostRecentPointWasLeft = false) {
    builder.StartTable(7);
    GameComponent.AddBall(builder, ball);
    GameComponent.AddRightPlayerPawn(builder, rightPlayerPawn);
    GameComponent.AddLeftPlayerPawn(builder, leftPlayerPawn);
    GameComponent.AddRightPlayerScore(builder, rightPlayerScore);
    GameComponent.AddLeftPlayerScore(builder, leftPlayerScore);
    GameComponent.AddMostRecentPointWasLeft(builder, mostRecentPointWasLeft);
    GameComponent.AddGamePhase(builder, gamePhase);
    return GameComponent.EndGameComponent(builder);
  }

  public static void StartGameComponent(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGamePhase(FlatBufferBuilder builder, sbyte gamePhase) { builder.AddSbyte(0, gamePhase, 0); }
  public static void AddLeftPlayerScore(FlatBufferBuilder builder, int leftPlayerScore) { builder.AddInt(1, leftPlayerScore, 0); }
  public static void AddRightPlayerScore(FlatBufferBuilder builder, int rightPlayerScore) { builder.AddInt(2, rightPlayerScore, 0); }
  public static void AddLeftPlayerPawn(FlatBufferBuilder builder, ulong leftPlayerPawn) { builder.AddUlong(3, leftPlayerPawn, 0); }
  public static void AddRightPlayerPawn(FlatBufferBuilder builder, ulong rightPlayerPawn) { builder.AddUlong(4, rightPlayerPawn, 0); }
  public static void AddBall(FlatBufferBuilder builder, ulong ball) { builder.AddUlong(5, ball, 0); }
  public static void AddMostRecentPointWasLeft(FlatBufferBuilder builder, bool mostRecentPointWasLeft) { builder.AddBool(6, mostRecentPointWasLeft, false); }
  public static Offset<FlatComponents.GameComponent> EndGameComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatComponents.GameComponent>(o);
  }
};


}
