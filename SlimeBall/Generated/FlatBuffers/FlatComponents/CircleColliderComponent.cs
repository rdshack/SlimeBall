// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatComponents
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CircleColliderComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CircleColliderComponent GetRootAsCircleColliderComponent(ByteBuffer _bb) { return GetRootAsCircleColliderComponent(_bb, new CircleColliderComponent()); }
  public static CircleColliderComponent GetRootAsCircleColliderComponent(ByteBuffer _bb, CircleColliderComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CircleColliderComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Drag { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AngularDrag { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Radius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Mass { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public sbyte GeoCollisionResponse { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public sbyte Layer { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<FlatComponents.CircleColliderComponent> CreateCircleColliderComponent(FlatBufferBuilder builder,
      int drag = 0,
      int angularDrag = 0,
      int radius = 0,
      int mass = 0,
      sbyte geoCollisionResponse = 0,
      sbyte layer = 0) {
    builder.StartTable(6);
    CircleColliderComponent.AddMass(builder, mass);
    CircleColliderComponent.AddRadius(builder, radius);
    CircleColliderComponent.AddAngularDrag(builder, angularDrag);
    CircleColliderComponent.AddDrag(builder, drag);
    CircleColliderComponent.AddLayer(builder, layer);
    CircleColliderComponent.AddGeoCollisionResponse(builder, geoCollisionResponse);
    return CircleColliderComponent.EndCircleColliderComponent(builder);
  }

  public static void StartCircleColliderComponent(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddDrag(FlatBufferBuilder builder, int drag) { builder.AddInt(0, drag, 0); }
  public static void AddAngularDrag(FlatBufferBuilder builder, int angularDrag) { builder.AddInt(1, angularDrag, 0); }
  public static void AddRadius(FlatBufferBuilder builder, int radius) { builder.AddInt(2, radius, 0); }
  public static void AddMass(FlatBufferBuilder builder, int mass) { builder.AddInt(3, mass, 0); }
  public static void AddGeoCollisionResponse(FlatBufferBuilder builder, sbyte geoCollisionResponse) { builder.AddSbyte(4, geoCollisionResponse, 0); }
  public static void AddLayer(FlatBufferBuilder builder, sbyte layer) { builder.AddSbyte(5, layer, 0); }
  public static Offset<FlatComponents.CircleColliderComponent> EndCircleColliderComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatComponents.CircleColliderComponent>(o);
  }
};


}
