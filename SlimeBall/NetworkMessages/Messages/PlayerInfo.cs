// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Messages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PlayerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PlayerInfo GetRootAsPlayerInfo(ByteBuffer _bb) { return GetRootAsPlayerInfo(_bb, new PlayerInfo()); }
  public static PlayerInfo GetRootAsPlayerInfo(ByteBuffer _bb, PlayerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ScreenName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScreenNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetScreenNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetScreenNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Slot { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Messages.PlayerInfo> CreatePlayerInfo(FlatBufferBuilder builder,
      StringOffset screenNameOffset = default(StringOffset),
      int slot = 0) {
    builder.StartTable(2);
    PlayerInfo.AddSlot(builder, slot);
    PlayerInfo.AddScreenName(builder, screenNameOffset);
    return PlayerInfo.EndPlayerInfo(builder);
  }

  public static void StartPlayerInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddScreenName(FlatBufferBuilder builder, StringOffset screenNameOffset) { builder.AddOffset(0, screenNameOffset.Value, 0); }
  public static void AddSlot(FlatBufferBuilder builder, int slot) { builder.AddInt(1, slot, 0); }
  public static Offset<Messages.PlayerInfo> EndPlayerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Messages.PlayerInfo>(o);
  }
};


}
