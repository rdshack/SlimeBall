// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Messages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LobbyMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static LobbyMessage GetRootAsLobbyMessage(ByteBuffer _bb) { return GetRootAsLobbyMessage(_bb, new LobbyMessage()); }
  public static LobbyMessage GetRootAsLobbyMessage(ByteBuffer _bb, LobbyMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LobbyMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Messages.LobbyMessageType Type { get { int o = __p.__offset(4); return o != 0 ? (Messages.LobbyMessageType)__p.bb.GetSbyte(o + __p.bb_pos) : Messages.LobbyMessageType.HostConnectAck; } }
  public byte Content(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ContentLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Messages.LobbyMessage> CreateLobbyMessage(FlatBufferBuilder builder,
      Messages.LobbyMessageType type = Messages.LobbyMessageType.HostConnectAck,
      VectorOffset contentOffset = default(VectorOffset)) {
    builder.StartTable(2);
    LobbyMessage.AddContent(builder, contentOffset);
    LobbyMessage.AddType(builder, type);
    return LobbyMessage.EndLobbyMessage(builder);
  }

  public static void StartLobbyMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, Messages.LobbyMessageType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddContent(FlatBufferBuilder builder, VectorOffset contentOffset) { builder.AddOffset(1, contentOffset.Value, 0); }
  public static VectorOffset CreateContentVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateContentVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartContentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Messages.LobbyMessage> EndLobbyMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Messages.LobbyMessage>(o);
  }
};


}
