// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Messages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct P2PPlayerSyncContent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static P2PPlayerSyncContent GetRootAsP2PPlayerSyncContent(ByteBuffer _bb) { return GetRootAsP2PPlayerSyncContent(_bb, new P2PPlayerSyncContent()); }
  public static P2PPlayerSyncContent GetRootAsP2PPlayerSyncContent(ByteBuffer _bb, P2PPlayerSyncContent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public P2PPlayerSyncContent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LatestInputAck { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FramesStart { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Messages.ByteArray? Inputs(int j) { int o = __p.__offset(8); return o != 0 ? (Messages.ByteArray?)(new Messages.ByteArray()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InputsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long FrameCreationTimestamps(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int FrameCreationTimestampsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetFrameCreationTimestampsBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetFrameCreationTimestampsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetFrameCreationTimestampsArray() { return __p.__vector_as_array<long>(10); }
  public int LatestHashAck { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HashesStart { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FrameHashes(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FrameHashesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFrameHashesBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetFrameHashesBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetFrameHashesArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<Messages.P2PPlayerSyncContent> CreateP2PPlayerSyncContent(FlatBufferBuilder builder,
      int latestInputAck = 0,
      int framesStart = 0,
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset frameCreationTimestampsOffset = default(VectorOffset),
      int latestHashAck = 0,
      int hashesStart = 0,
      VectorOffset frameHashesOffset = default(VectorOffset)) {
    builder.StartTable(7);
    P2PPlayerSyncContent.AddFrameHashes(builder, frameHashesOffset);
    P2PPlayerSyncContent.AddHashesStart(builder, hashesStart);
    P2PPlayerSyncContent.AddLatestHashAck(builder, latestHashAck);
    P2PPlayerSyncContent.AddFrameCreationTimestamps(builder, frameCreationTimestampsOffset);
    P2PPlayerSyncContent.AddInputs(builder, inputsOffset);
    P2PPlayerSyncContent.AddFramesStart(builder, framesStart);
    P2PPlayerSyncContent.AddLatestInputAck(builder, latestInputAck);
    return P2PPlayerSyncContent.EndP2PPlayerSyncContent(builder);
  }

  public static void StartP2PPlayerSyncContent(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddLatestInputAck(FlatBufferBuilder builder, int latestInputAck) { builder.AddInt(0, latestInputAck, 0); }
  public static void AddFramesStart(FlatBufferBuilder builder, int framesStart) { builder.AddInt(1, framesStart, 0); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(2, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, Offset<Messages.ByteArray>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, Offset<Messages.ByteArray>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFrameCreationTimestamps(FlatBufferBuilder builder, VectorOffset frameCreationTimestampsOffset) { builder.AddOffset(3, frameCreationTimestampsOffset.Value, 0); }
  public static VectorOffset CreateFrameCreationTimestampsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrameCreationTimestampsVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartFrameCreationTimestampsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddLatestHashAck(FlatBufferBuilder builder, int latestHashAck) { builder.AddInt(4, latestHashAck, 0); }
  public static void AddHashesStart(FlatBufferBuilder builder, int hashesStart) { builder.AddInt(5, hashesStart, 0); }
  public static void AddFrameHashes(FlatBufferBuilder builder, VectorOffset frameHashesOffset) { builder.AddOffset(6, frameHashesOffset.Value, 0); }
  public static VectorOffset CreateFrameHashesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrameHashesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFrameHashesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Messages.P2PPlayerSyncContent> EndP2PPlayerSyncContent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Messages.P2PPlayerSyncContent>(o);
  }
};


}
